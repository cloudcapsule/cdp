// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package datapluginv1alpha

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DataPluginServiceClient is the client API for DataPluginService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DataPluginServiceClient interface {
	Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error)
	SubmitDataTask(ctx context.Context, in *SubmitDataTaskRequest, opts ...grpc.CallOption) (*SubmitDataTaskResponse, error)
	DataTaskStatus(ctx context.Context, in *DataTaskStatusRequest, opts ...grpc.CallOption) (*DataTaskStatusResponse, error)
	Healthiness(ctx context.Context, in *HealthinessRequest, opts ...grpc.CallOption) (*HealthinessResponse, error)
}

type dataPluginServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDataPluginServiceClient(cc grpc.ClientConnInterface) DataPluginServiceClient {
	return &dataPluginServiceClient{cc}
}

func (c *dataPluginServiceClient) Registration(ctx context.Context, in *RegistrationRequest, opts ...grpc.CallOption) (*RegistrationResponse, error) {
	out := new(RegistrationResponse)
	err := c.cc.Invoke(ctx, "/dataplugin.v1alpha.DataPluginService/Registration", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPluginServiceClient) SubmitDataTask(ctx context.Context, in *SubmitDataTaskRequest, opts ...grpc.CallOption) (*SubmitDataTaskResponse, error) {
	out := new(SubmitDataTaskResponse)
	err := c.cc.Invoke(ctx, "/dataplugin.v1alpha.DataPluginService/SubmitDataTask", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPluginServiceClient) DataTaskStatus(ctx context.Context, in *DataTaskStatusRequest, opts ...grpc.CallOption) (*DataTaskStatusResponse, error) {
	out := new(DataTaskStatusResponse)
	err := c.cc.Invoke(ctx, "/dataplugin.v1alpha.DataPluginService/DataTaskStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dataPluginServiceClient) Healthiness(ctx context.Context, in *HealthinessRequest, opts ...grpc.CallOption) (*HealthinessResponse, error) {
	out := new(HealthinessResponse)
	err := c.cc.Invoke(ctx, "/dataplugin.v1alpha.DataPluginService/Healthiness", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DataPluginServiceServer is the server API for DataPluginService service.
// All implementations must embed UnimplementedDataPluginServiceServer
// for forward compatibility
type DataPluginServiceServer interface {
	Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error)
	SubmitDataTask(context.Context, *SubmitDataTaskRequest) (*SubmitDataTaskResponse, error)
	DataTaskStatus(context.Context, *DataTaskStatusRequest) (*DataTaskStatusResponse, error)
	Healthiness(context.Context, *HealthinessRequest) (*HealthinessResponse, error)
	mustEmbedUnimplementedDataPluginServiceServer()
}

// UnimplementedDataPluginServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDataPluginServiceServer struct {
}

func (UnimplementedDataPluginServiceServer) Registration(context.Context, *RegistrationRequest) (*RegistrationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Registration not implemented")
}
func (UnimplementedDataPluginServiceServer) SubmitDataTask(context.Context, *SubmitDataTaskRequest) (*SubmitDataTaskResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitDataTask not implemented")
}
func (UnimplementedDataPluginServiceServer) DataTaskStatus(context.Context, *DataTaskStatusRequest) (*DataTaskStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DataTaskStatus not implemented")
}
func (UnimplementedDataPluginServiceServer) Healthiness(context.Context, *HealthinessRequest) (*HealthinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Healthiness not implemented")
}
func (UnimplementedDataPluginServiceServer) mustEmbedUnimplementedDataPluginServiceServer() {}

// UnsafeDataPluginServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DataPluginServiceServer will
// result in compilation errors.
type UnsafeDataPluginServiceServer interface {
	mustEmbedUnimplementedDataPluginServiceServer()
}

func RegisterDataPluginServiceServer(s grpc.ServiceRegistrar, srv DataPluginServiceServer) {
	s.RegisterService(&DataPluginService_ServiceDesc, srv)
}

func _DataPluginService_Registration_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegistrationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPluginServiceServer).Registration(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplugin.v1alpha.DataPluginService/Registration",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPluginServiceServer).Registration(ctx, req.(*RegistrationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPluginService_SubmitDataTask_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitDataTaskRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPluginServiceServer).SubmitDataTask(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplugin.v1alpha.DataPluginService/SubmitDataTask",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPluginServiceServer).SubmitDataTask(ctx, req.(*SubmitDataTaskRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPluginService_DataTaskStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataTaskStatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPluginServiceServer).DataTaskStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplugin.v1alpha.DataPluginService/DataTaskStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPluginServiceServer).DataTaskStatus(ctx, req.(*DataTaskStatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _DataPluginService_Healthiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HealthinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DataPluginServiceServer).Healthiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dataplugin.v1alpha.DataPluginService/Healthiness",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DataPluginServiceServer).Healthiness(ctx, req.(*HealthinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// DataPluginService_ServiceDesc is the grpc.ServiceDesc for DataPluginService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DataPluginService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dataplugin.v1alpha.DataPluginService",
	HandlerType: (*DataPluginServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Registration",
			Handler:    _DataPluginService_Registration_Handler,
		},
		{
			MethodName: "SubmitDataTask",
			Handler:    _DataPluginService_SubmitDataTask_Handler,
		},
		{
			MethodName: "DataTaskStatus",
			Handler:    _DataPluginService_DataTaskStatus_Handler,
		},
		{
			MethodName: "Healthiness",
			Handler:    _DataPluginService_Healthiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dataplugin/v1alpha/api.proto",
}
